# -*- coding: utf-8 -*-
"""saved_NEW_xGBSTONK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pu5FKNuGmuHCGXVslncqUo10tVY9yrLd
"""


import yfinance as yf
import pandas as pd
import numpy as np

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from keras.callbacks import EarlyStopping
from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
import requests
import time
import bs4
from bs4 import BeautifulSoup
import random
import re

def flow2blo(stock,time_back, interval_per, target_band, interval_back):
  #flow2blo('aapl','20d','10m', 5, 15)
  from pandas._libs.hashtable import ObjectVector
  target_band = target_band
  bol = interval_back
  rsi_ = interval_back
  ewm_ = interval_back
  b_devs = 2
  data = pd.DataFrame(yf.download(tickers = stock, period = time_back, interval = interval_per)).reset_index().reset_index()
  data['pchange'] = round((data['Open']-data['Close'])/data['Open']*1000)
  data_mark = data[data['pchange']>=target_band].append(data[data['pchange']<=-1*target_band])
  data_dud = data[data['pchange']>=-4]
  data_dud = data_dud[data_dud['pchange']<=4].sample(int(round(len(data_mark)/2)), replace = True)

#metrics taken from investopedia (most popular technical indicators)
  five_int = []
  ten_int = []
  fft_int = []
  tfive = []
  bolinger = []
  bolinger_2x = []
  bolinger_2d = []
  rsi = []
  rsi2 = []
  macd = []
  macd2 = []
  obv = []
  ema = []
  ema_s = []
  ema_a = []

  for x in data_mark['index']:
    five_int.append(np.average(data['Close'].iloc[x-5:x]))

  for x in data_mark['index']:
    ten_int.append(np.average(data['Close'].iloc[x-10:x]))

  for x in data_mark['index']:
    fft_int.append(np.average(data['Close'].iloc[x-15:x]))

  for x in data_mark['index']:
    tfive.append(np.average(data['Close'].iloc[x-25:x]))

  for x in data_mark['index']:
    bolinger.append(np.average((data['Close'].iloc[x-bol:x]+data['Low'].iloc[x-bol:x]+data['High'].iloc[x-bol:x])/3)+b_devs*np.std((data['Close'].iloc[x-bol:x]+data['Low'].iloc[x-bol:x]+data['High'].iloc[x-bol:x])/3))
  
  for x in data_mark['index']:
    bolinger_2d.append(np.average((data['Close'].iloc[x-round(bol/2):x]+data['Low'].iloc[x-round(bol/2):x]+data['High'].iloc[x-round(bol/2):x])/3)+b_devs*np.std((data['Close'].iloc[x-round(bol/2):x]+data['Low'].iloc[x-round(bol/2):x]+data['High'].iloc[x-round(bol/2):x])/3))
  for x in data_mark['index']:
    bolinger_2x.append(np.average((data['Close'].iloc[x-round(bol*2):x]+data['Low'].iloc[x-round(bol*2):x]+data['High'].iloc[x-round(bol*2):x])/3)+b_devs*np.std((data['Close'].iloc[x-round(bol*2):x]+data['Low'].iloc[x-round(bol*2):x]+data['High'].iloc[x-round(bol*2):x])/3))

  for x in data_mark['index']:
    try:
      rsi.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]>=0])/np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]<=0]))))
    except:
      rsi.append(np.average(rsi))

  for x in data_mark['index']:
    try:
      rsi2.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]>=0])/np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]<=0]))))
    except:
      rsi2.append(np.average(rsi2))

  for x in data_mark['index']:
    try:
      macd.append(np.average(data['Close'].iloc[x-12:x]) - np.average(data['Close'].iloc[x-26:x]))
    except:
      macd.append(np.average(macd))

  for x in data_mark['index']:
    try:
      macd2.append(np.average(data['Close'].iloc[x-12:x]) - np.average(data['Close'].iloc[x-26:x]))
    except:
      macd2.append(np.average(macd2))

  for x in data_mark['index']:
    try:
      obv.append(np.average(data['Volume'].iloc[x-1:x]) + np.average(data['Volume'].iloc[x-2:x-1]))
    except:
      obv.append(np.average(obv))

  for x in data_mark['index']:
    df = (data['High'].iloc[x-ewm_:x]+data['Low'].iloc[x-ewm_:x]+data['Close'].iloc[x-ewm_:x])/3
    ema_a.append(np.average(df.ewm(com = .4).mean()))
    ema_s.append(np.std(df.ewm(com = .4).mean()))

  final_t = pd.DataFrame()

  final_t['5_sma'] =five_int
  final_t['10_sma'] =ten_int
  final_t['15_sma'] =fft_int
  final_t['25_sma'] = tfive
  final_t['bolinger'] = bolinger
  final_t['rsi'] =rsi
  final_t['rsi_2'] = rsi2
  final_t['macd'] = macd
  final_t['macd_2'] = macd2
  final_t['obv'] =obv
  final_t['ema_std'] = ema_s
  final_t['ema_avg'] = ema_a
  target = []
  for x in data_mark['pchange']:
    if x >= 5:
      target.append(1)
    else:
      target.append(0)
  final_t['target'] = target

  data_dud = data[data['pchange']>=-4]
  data_dud = data_dud[data_dud['pchange']<=4].sample(int(round(len(data_mark)/2)), replace = True)

  five_intd = []
  ten_intd = []
  fft_intd = []
  tfived = []
  bolingerd = []
  bolingerd_2x = []
  bolingerd_2d = []
  rsid = []
  rsi2d = []
  macdd = []
  macd2d = []
  obvd = []
  emad = []
  ema_sd = []
  ema_ad = []


  for x in data_dud['index']:
    five_intd.append(np.average(data['Close'].iloc[x-5:x]))

  for x in data_dud['index']:
    ten_intd.append(np.average(data['Close'].iloc[x-10:x]))

  for x in data_dud['index']:
    fft_intd.append(np.average(data['Close'].iloc[x-15:x]))

  for x in data_dud['index']:
    tfived.append(np.average(data['Close'].iloc[x-25:x]))

  for x in data_dud['index']:
    bolingerd.append(np.average((data['Close'].iloc[x-bol:x]+data['Low'].iloc[x-bol:x]+data['High'].iloc[x-bol:x])/3)+b_devs*np.std((data['Close'].iloc[x-bol:x]+data['Low'].iloc[x-bol:x]+data['High'].iloc[x-bol:x])/3))
  for x in data_dud['index']:
    bolingerd_2x.append(np.average((data['Close'].iloc[x-round(bol*2):x]+data['Low'].iloc[x-round(bol*2):x]+data['High'].iloc[x-round(bol*2):x])/3)+b_devs*np.std((data['Close'].iloc[x-round(bol*2):x]+data['Low'].iloc[x-bol:x]+data['High'].iloc[x-round(bol*2):x])/3))
  for x in data_dud['index']:
    bolingerd_2d.append(np.average((data['Close'].iloc[x-round(bol/2):x]+data['Low'].iloc[x-round(bol/2):x]+data['High'].iloc[x-round(bol/2):x])/3)+b_devs*np.std((data['Close'].iloc[x-round(bol/2):x]+data['Low'].iloc[x-round(bol/2):x]+data['High'].iloc[x-round(bol/2):x])/3))

  for x in data_dud['index']:
    try:
      rsid.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]>=0])/np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]<=0]))))
    except:
      rsid.append(np.average(rsi))

  for x in data_dud['index']:
    try:
      rsi2d.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]>=0])/np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]<=0]))))
    except:
      rsi2d.append(np.average(rsi2))

  for x in data_dud['index']:
    try:
      macdd.append(np.average(data['Close'].iloc[x-12:x]) - np.average(data['Close'].iloc[x-26:x]))
    except:
      macdd.append(np.average(macd))

  for x in data_dud['index']:
    try:
      macd2d.append(np.average(data['Close'].iloc[x-12:x]) - np.average(data['Close'].iloc[x-26:x]))
    except:
      macd2d.append(np.average(macd2))

  for x in data_dud['index']:
    try:
      obvd.append(np.average(data['Volume'].iloc[x-1:x]) + np.average(data['Volume'].iloc[x-2:x-1]))
    except:
      obvd.append(np.average(obv))

  for x in data_dud['index']:
    df = (data['High'].iloc[x-ewm_:x]+data['Low'].iloc[x-ewm_:x]+data['Close'].iloc[x-ewm_:x])/3
    ema_ad.append(np.average(df.ewm(com = .4).mean()))
    ema_sd.append(np.std(df.ewm(com = .4).mean()))
  targetd = []
  for x in data_dud['index']:
    targetd.append(2)
  final_td = pd.DataFrame()

  final_td['5_sma'] =five_intd
  final_td['10_sma'] =ten_intd
  final_td['15_sma'] =fft_intd
  final_td['25_sma'] = tfived
  final_td['bolinger'] = bolingerd
  final_td['rsi'] =rsid
  final_td['rsi_2'] = rsi2d
  final_td['macd'] = macdd
  final_td['macd_2'] = macd2d
  final_td['obv'] =obvd
  final_td['ema_std'] = ema_sd
  final_td['ema_avg'] = ema_ad
  final_td['target'] = targetd

  final = final_td.append(final_t)
  #epa, pe ratio, projected earnings growth (PEG), FCF, P/B ratio, return on equity (ROE), diidend payout ratio (dpr), price to sales ratio (p/s), dividend yield ratio, debt to equity ratio (d/e) 
  metric = 'earnings+per+share'
  url = 'https://www.google.com/search?q='+stock+'+'+metric
  headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36'}
  epa = {'epa':[]}
  html = requests.get(url,headers = headers).text
  soup = bs4.BeautifulSoup(html, "html.parser")
  for tag in soup.findAll("th", {"class": "kyITtb"}):
          epa['epa'].append(tag.findNext("td"))

  listt = []
  for x in epa['epa']:
    try:
      if len(str(x).split('>')[1].split('<')[0].split('.')[1])==2:
        listt.append(str(x).split('>')[1].split('<')[0].replace('B','00000000').replace('M','000000').replace('.',''))
      elif len(str(x).split('>')[1].split('<')[0].split('.')[1])==3:
        listt.append(str(x).split('>')[1].split('<')[0].replace('B','0000000').replace('M','00000').replace('.',''))
      else:
        listt.append(0)
    except:
      listt.append(0)

  # 0 = revenue / quarter (mo1) , 1: net income (mo1), 2: EPS *100, 5 =  net change in cash
  # 8 (mo2), 9 (mo2), 10 (mo2), 13 (mo2)
  # 16 (mo3), 17 (mo3), 18 (mo3), 13 (mo3)
  try:
    rev_q3 = int(listt[0])
    rev_q2 = int(listt[8])
    rev_q1 = int(listt[16])

    netIncome_q3 = int(listt[1])
    netIncome_q2 = int(listt[9])
    netIncome_q1 =int(listt[17])

    EPS_q3 = int(listt[2])
    EPS_q2 = int(listt[10])
    EPS_q1 = int(listt[18])

    netCashChange_q3 = int(listt[5])
    netCashChange_q2 = int(listt[13])
    netCashChange_q1 = int(listt[21])

    avg_rev = (rev_q1+rev_q2+rev_q3)/3
    std_rev = np.std([rev_q1,rev_q2,rev_q3])
    chang_last_q_rev = rev_q3 - rev_q2
    change_two_q_rev =  rev_q3 - rev_q1
    
    final['avg_rev'] = avg_rev
    final['std_rev'] = std_rev
    final['1p_rev'] = chang_last_q_rev
    final['2p_rev'] = change_two_q_rev

    avg_NI = (netIncome_q1+netIncome_q2+netIncome_q3)/3
    std_NI = np.std([netIncome_q1,netIncome_q2,netIncome_q3])
    chang_last_NI = netIncome_q3 - netIncome_q2
    change_two_NI =  netIncome_q3 - netIncome_q1
  
    final['avg_ni'] = avg_NI
    final['std_ni'] = std_NI
    final['1p_ni'] = chang_last_NI
    final['2p_ni'] = change_two_NI


    avg_eps = (EPS_q1+EPS_q2+EPS_q3)/3
    std_eps = np.std([EPS_q1,EPS_q2,EPS_q3])
    chang_last_q_eps = EPS_q3 - EPS_q2
    change_two_q_eps =  EPS_q3 - EPS_q1

    final['avg_eps'] = avg_eps
    final['std_eps'] = std_eps
    final['1p_eps'] = chang_last_q_eps
    final['2p_eps'] = change_two_q_eps


    avg_CC = (netCashChange_q1+netCashChange_q2+netCashChange_q3)/3
    std_CC = np.std([netCashChange_q1,netCashChange_q2,netCashChange_q3])
    chang_last_q_cashChange= rev_q3 - rev_q2
    change_two_q_cashChange =  rev_q3 - rev_q1

    final['avg_cc'] = avg_CC
    final['std_cc'] = std_CC
    final['1p_cc'] = chang_last_q_cashChange
    final['2p_cc'] = change_two_q_cashChange
  except:
    final['avg_cc'] = 0
    final['std_cc'] = 0
    final['1p_cc'] = 0
    final['2p_cc'] = 0

    final['avg_eps'] = 0
    final['std_eps'] = 0
    final['1p_eps'] = 0
    final['2p_eps']  = 0

    final['avg_ni'] = 0
    final['std_ni'] = 0
    final['1p_ni'] = 0
    final['2p_ni'] = 0

    final['avg_rev'] = 0
    final['std_rev'] = 0
    final['1p_rev'] = 0
    final['2p_rev'] = 0
  return final

df = pd.DataFrame()
def clean_dataset(df):
  assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
  df.dropna(inplace=True)
  indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
  return df[indices_to_keep].astype(np.float64)

def random_forest(x,y):
  X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  clf=RandomForestClassifier(n_estimators=10000)
  clf.fit(X_train,y_train)
  y_pred=clf.predict(X_test)
  print('random forest score = '+str(metrics.accuracy_score(y_test, y_pred)))
  return str(metrics.accuracy_score(y_test, y_pred)), clf
def xgb_forest(x,y):
  X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  xgb_clf = XGBClassifier()
  xgb_clf.fit(X_train, y_train)
  score = xgb_clf.score(X_test, y_test)
  print('XGB Score = '+str(score))
  return str(score)

def gradient_boosted_forest(x,y):
  X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  lr_list = [0.05]
  for learning_rate in lr_list:
      gb_clf = GradientBoostingClassifier(n_estimators=50, learning_rate=learning_rate, max_features=10, max_depth=10, random_state=0)
      gb_clf.fit(X_train, y_train)
      print("Learning rate: ", learning_rate)
      print("Gradient Boosted Accuracy score (training): {0:.3f}".format(gb_clf.score(X_train, y_train)))
      print("Gradient Boosted Accuracy score (validation): {0:.3f}".format(gb_clf.score(X_test, y_test)))
  return gb_clf.score(X_test, y_test)


def runIt(days_back,trading_interval,pchange,eye_back):
  df = flow2blo('msft',days_back,trading_interval, pchange, eye_back)
  df = df.append(flow2blo('goog',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('amzn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('aapl',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('fb',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('tsm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('nvda',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('baba',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('asml',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('adbe',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('csco',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('amd',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('intc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('qcom',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('ibm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('intu',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('sap',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('now',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('adi',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bkng',days_back,trading_interval, pchange, eye_back))

  df = df.append(flow2blo('crm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('now',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('adp',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('klac',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('vmw',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('adsk',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('team',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cdns',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('snow',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('wday',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('crwd',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('zm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cern',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('veev',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('enph',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('keys',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('zs',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('anss',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('twlo',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('net',days_back,trading_interval, pchange, eye_back))

  df = df.append(flow2blo('txn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('nvda',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('adi',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('amat',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('mu',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('on',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('umc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('entg',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('qrvo',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('wolf',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('powi',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('onto',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('sitm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cohu',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('plab',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('crdo',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('xper',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('veco',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('nvts',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('sgh',days_back,trading_interval, pchange, eye_back))

  df = df.append(flow2blo('jnj',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('lly',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('pfe',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('abbv',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('mrk',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('azn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('nvo',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cvs',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('amgn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('sny',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bmy',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('gild',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('zts',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('gsk',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('regn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cslax',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('tak',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('mrna',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bntx',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bax',days_back,trading_interval, pchange, eye_back))

  df = df.append(flow2blo('pypl',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('abnb',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('jd',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('pdd',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bidu',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('pins',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bill',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('gddy',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('okta',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('tcom',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('lu',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('chwy',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('etsy',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('zg',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bili',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('hood',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('docs',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('lyft',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('sofi',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('cvna',days_back,trading_interval, pchange, eye_back))

  df = df.append(flow2blo('jpm',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bac',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('wfc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('ms',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('hsbc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('td',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('ry',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('gs',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('hdb',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('c',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bns',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('mufg',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('pnc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('bmo',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('ibn',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('tfc',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('ubs',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('san',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('lbsi',days_back,trading_interval, pchange, eye_back))
  df = df.append(flow2blo('itub',days_back,trading_interval, pchange, eye_back))
  df = df.sample(len(df))

  from sklearn.preprocessing import StandardScaler
  scaler = StandardScaler()
  target = df['target']
  x = clean_dataset(df)
  y = x['target']
  df = scaler.fit(x.drop(columns = 'target'))
  x = pd.DataFrame(scaler.transform(x.drop(columns = 'target')))

  xc, clf = random_forest(x,y)
  xv = xgb_forest(x,y)
  xg = gradient_boosted_forest(x,y)

  return xc, xv, xg, clf


forest, xgb , gb, clf = runIt('7d','1m',5,100)



ACCT_NUMBER = 
API_KEY = 
CALLBACK_URL = ''

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

from tda import auth, client
from webdriver_manager.chrome import ChromeDriverManager

def auth_func():

    token_path = 'token.pickle'
    try:
        c = auth.client_from_token_file(token_path, API_KEY)
    except FileNotFoundError:
        from selenium import webdriver
        with webdriver.Chrome(ChromeDriverManager().install()) as driver:
            c = auth.client_from_login_flow(
                driver, API_KEY, CALLBACK_URL, token_path)

    return c
c = auth_func()

from tda.orders.equities import equity_buy_market, equity_sell_market
from tda.orders.common import Duration, Session

def place_order(c, order_type, shares, STOCK):

    if order_type == 'buy':
        order_spec = equity_buy_market(STOCK, shares).set_session(Session.NORMAL).set_duration(Duration.DAY).build()
        c.place_order(ACCT_NUMBER, order_spec)

    if order_type == 'sell':
        order_spec = equity_sell_market(STOCK, shares).set_session(
            Session.NORMAL).set_duration(Duration.DAY).build()
        c.place_order(ACCT_NUMBER, order_spec)

def Credit_Sticks(c):
    
    STOCK = 'CS'
    r = c.get_quote(STOCK)
    assert r.status_code == 200, r.raise_for_status()

    y = r.json()
    bid_price = int(y[STOCK]['bidPrice'])
    bid_quantity = int(y[STOCK]['bidSize'])
    ask_price = int(y[STOCK]['askPrice'])
    ask_quantity = int(y[STOCK]['askSize'])
    
    price = (bid_price+((ask_price-bid_price)*bid_quantity/(ask_quantity+bid_quantity))+ask_price+((ask_price-bid_price)*ask_quantity/(ask_quantity+bid_quantity)))/2
    pchange = (ask_price-bid_price)/bid_price
    volume = bid_quantity+ask_quantity
    
    return bid_price, bid_quantity, ask_price, ask_quantity, price, pchange, volume

CS = {'bid_price':[],'bid_quantity':[],'ask_price':[],'ask_quantity':[],'price':[],'pchange':[],'volume':[]}
import time
for x in range(30):
    time.sleep(60)
    bid_price, bid_quantity, ask_price, ask_quantity, price, pchange, volume= CS(c)
    CS['bid_price'].append(bid_price)
    CS['bid_quantity'].append(bid_quantity)
    CS['ask_price'].append(ask_price)
    CS['ask_quantity'].append(ask_quantity)
    CS['price'].append(price)
    CS['pchange'].append(pchange)
    CS['volume'].append(volume)

def flow2blo(stock, target_band, interval_back):
  #flow2blo('aapl','20d','10m', 5, 15)
  from pandas._libs.hashtable import ObjectVector
  import pandas as pd
  import numpy as np
  
  target_band = target_band
  bol = interval_back
  rsi_ = interval_back
  ewm_ = interval_back
  b_devs = 2
  data = pd.DataFrame(CS)

#metrics taken from investopedia (most popular technical indicators)
  five_int = []
  ten_int = []
  fft_int = []
  tfive = []
  bolinger = []
  bolinger_2x = []
  bolinger_2d = []
  rsi = []
  rsi2 = []
  macd = []
  macd2 = []
  obv = []
  ema = []
  ema_s = []
  ema_a = []
  
  data_mark = data

  for x in data_mark['index']:
    five_int.append(np.average(data['price'].iloc[x-5:x]))

  for x in data_mark['index']:
    ten_int.append(np.average(data['price'].iloc[x-10:x]))

  for x in data_mark['index']:
    fft_int.append(np.average(data['price'].iloc[x-15:x]))

  for x in data_mark['index']:
    tfive.append(np.average(data['price'].iloc[x-25:x]))

  for x in data_mark['index']:
    bolinger.append(np.average((data['price'].iloc[x-bol:x]+data['bid_price'].iloc[x-bol:x]+data['ask_price'].iloc[x-bol:x])/3)+b_devs*np.std((data['price'].iloc[x-bol:x]+data['bid_price'].iloc[x-bol:x]+data['ask_price'].iloc[x-bol:x])/3))
  
  for x in data_mark['index']:
    bolinger_2d.append(np.average((data['price'].iloc[x-round(bol/2):x]+data['bid_price'].iloc[x-round(bol/2):x]+data['ask_price'].iloc[x-round(bol/2):x])/3)+b_devs*np.std((data['price'].iloc[x-round(bol/2):x]+data['bid_price'].iloc[x-round(bol/2):x]+data['ask_price'].iloc[x-round(bol/2):x])/3))
  for x in data_mark['index']:
    bolinger_2x.append(np.average((data['price'].iloc[x-round(bol*2):x]+data['bid_price'].iloc[x-round(bol*2):x]+data['ask_price'].iloc[x-round(bol*2):x])/3)+b_devs*np.std((data['price'].iloc[x-round(bol*2):x]+data['bid_price'].iloc[x-round(bol*2):x]+data['ask_price'].iloc[x-round(bol*2):x])/3))

  for x in data_mark['index']:
    try:
      rsi.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]>=0])/np.average(data['pchange'].iloc[x-rsi_:x][data['pchange'].iloc[x-rsi_:x]<=0]))))
    except:
      rsi.append(np.average(rsi))

  for x in data_mark['index']:
    try:
      rsi2.append(100-(100/(1+np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]>=0])/np.average(data['pchange'].iloc[x-rsi_*2:x-rsi_][data['pchange'].iloc[x-rsi_*2:x-rsi_]<=0]))))
    except:
      rsi2.append(np.average(rsi2))

  for x in data_mark['index']:
    try:
      macd.append(np.average(data['price'].iloc[x-12:x]) - np.average(data['price'].iloc[x-26:x]))
    except:
      macd.append(np.average(macd))

  for x in data_mark['index']:
    try:
      macd2.append(np.average(data['price'].iloc[x-12:x]) - np.average(data['price'].iloc[x-26:x]))
    except:
      macd2.append(np.average(macd2))

  for x in data_mark['index']:
    try:
      obv.append(np.average(data['volume'].iloc[x-1:x]) + np.average(data['volume'].iloc[x-2:x-1]))
    except:
      obv.append(np.average(obv))

  for x in data_mark['index']:
    df = (data['ask_price'].iloc[x-ewm_:x]+data['bid_price'].iloc[x-ewm_:x]+data['price'].iloc[x-ewm_:x])/3
    ema_a.append(np.average(df.ewm(com = .4).mean()))
    ema_s.append(np.std(df.ewm(com = .4).mean()))

  final_t = pd.DataFrame()
  final_t['5_sma'] =five_int
  final_t['10_sma'] =ten_int
  final_t['15_sma'] =fft_int
  final_t['25_sma'] = tfive
  final_t['bolinger'] = bolinger
  final_t['rsi'] =rsi
  final_t['rsi_2'] = rsi2
  final_t['macd'] = macd
  final_t['macd_2'] = macd2
  final_t['obv'] =obv
  final_t['ema_std'] = ema_s
  final_t['ema_avg'] = ema_a


clf.predict(final_t)

#then use buy order function and tweak to your parameters, also can get xgb + gb models if you add them as
# i have added the random forest. check target variables above to decipher meaning of 0,1,2